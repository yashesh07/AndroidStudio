--------------
Quetelet Index
--------------
import java.util.*;

public class Solution {

    static Scanner scan = new Scanner(System.in);

    public static void main(String[] args) {
        solve();
    }

    public static void solve(){
        int weight = scan.nextInt();
        int height = scan.nextInt();
        System.out.println(weight/(height*height));
    }
}



---------------
School Assembly
---------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        long [] h = new long[n];
        for(int i = 0; i<n; i++)    h[i] = scan.nextLong();
        Arrays.sort(h);
        System.out.println(h[n-1]);
    }
}



--------
Wizardry
--------
import java.util.*;

public class Solution {

    static Scanner scan = new Scanner(System.in);

    public static void main(String[] args) {
        solve();
    }

    public static void solve(){
        int n = scan.nextInt();
        LinkedHashSet<Integer> set = new LinkedHashSet<>();
        for(int i = 0; i<n; i++){
            int temp = scan.nextInt();
            set.add(temp);
        }
        int max = 0;
        for(int i : set){
            for(int j : set){
                if(i==j)    continue;
                max = Math.max(max, gcd(i, j));
            }
        }
        System.out.println(max);
    }

    static int gcd(int a, int b) {
        return b==0 ? a : gcd(b, a%b);
    }
}



------------------
Professor Marshall
------------------
import java.util.*;

public class Solution {

    static Scanner scan = new Scanner(System.in);

    public static void main(String[] args) {
        solve();
    }

    public static void solve(){
        int n = scan.nextInt();
        int [] bulbs = new int[n];
        for(int i = 0; i<n; i++){
            bulbs[i] = scan.nextInt();
        }
        int count = n-1;
        while(count>=0 && bulbs[count]==0)  count--;
        int op = 0;
        int flag = -1;
        for(int i = 0; i<=count; i++){
            if(bulbs[i]!=flag){
                flag = bulbs[i];
                op++;
            }
        }
        System.out.println(op);
    }
}



----------
Olden Days
----------
import java.util.*;

public class Solution {

    static Scanner scan = new Scanner(System.in);

    public static void main(String[] args) {
        solve();
    }

    public static void solve(){
        int n = scan.nextInt();
        int [][] intervals = new int[n][2];
        for(int i = 0; i<n; i++){
            intervals[i][0] = scan.nextInt();
            intervals[i][1] = scan.nextInt();
        }
        Arrays.sort(intervals, (a, b) -> a[0]==b[0] ? a[1]-b[1] : a[0]-b[0]);
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        int days = 0;
        for(int [] row : intervals){
            if(pq.isEmpty() || pq.peek()>=row[0])   days++;
            else    pq.poll();
            pq.add(row[1]);
        }
        System.out.println(days);
    }
}



----------
Boom Beach
----------
import java.util.*;

public class Solution {

    static Scanner scan = new Scanner(System.in);

    public static void main(String[] args) {
        solve();
    }

    public static void solve(){
        int n = scan.nextInt();
        int [] whiteStones = new int[n];
        int [] blackStones = new int[n];
        for(int i = 0; i<n; i++){
            whiteStones[i] = scan.nextInt();
        }
        for(int i = 0; i<n; i++){
            blackStones[i] = scan.nextInt();
        }
        int ans = 0;
        int totalStones = 0;
        for(int i = 0; i<n; i++){
            totalStones += whiteStones[i];
        }
        Integer [][] memo = new Integer[n][totalStones+1];
        for(int i = 1; i<=totalStones; i++){
            ans = Math.max(ans, Math.min(i, dp(i, 0, whiteStones, blackStones, n, memo)));
        }
        System.out.println(ans);
    }

    public static int dp(int totalStones, int index, int [] whiteStones, int [] blackStones, int n, Integer [][] memo){
        if(totalStones<0)    return -100000000;
        if(index==n){
            return totalStones==0 ? 0 : -100000000;
        }
        if(memo[index][totalStones]!=null) return memo[index][totalStones];
        return memo[index][totalStones] = Math.max(dp(totalStones-whiteStones[index], index+1, whiteStones, blackStones, n, memo), blackStones[index]+dp(totalStones, index+1, whiteStones, blackStones, n, memo));
    }
}



----------------
Santa's Surprise
----------------
import java.util.*;

public class Solution {

    static Scanner scan = new Scanner(System.in);

    public static void main(String[] args) {
        solve();
    }

    public static void solve(){
        int n = scan.nextInt();
        int [] housePlaque = new int[n];
        for(int i = 0; i<n; i++){
            housePlaque[i] = scan.nextInt();
        }
        String [] binaryStrings = new String[n];
        for(int i = 0; i<n; i++){
            binaryStrings[i] = String.format("%32s", Integer.toBinaryString(housePlaque[i])).replaceAll(" ", "0");
        }
        List<List<int []>> graph = new ArrayList<>();
        for(int i = 0; i<n; i++){
            graph.add(new ArrayList<>());
        }
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                if(i==j)    continue;
                int dis = hammingDistance(binaryStrings[i], binaryStrings[j]);
                graph.get(i).add(new int[]{j, dis});
            }
        }
        int [] mst = primsAlgorithm(graph);
        int fuel = 32;
        for(int i = 0; i<n; i++){
            if(mst[i]==-1)  continue;
            fuel += hammingDistance(binaryStrings[mst[i]], binaryStrings[i]);
        }
        System.out.println(fuel);
    }

    public static int [] primsAlgorithm(List<List<int []>> graph){
        int [] key = new int[graph.size()];
        Arrays.fill(key, Integer.MAX_VALUE);
        key[0] = 0;
        int [] parent = new int[graph.size()];
        parent[0] = -1;
        boolean [] mst = new boolean[graph.size()];
        PriorityQueue<int []> pq = new PriorityQueue<>(Comparator.comparing(a -> a[1]));
        pq.offer(new int[]{0, key[0]});

        while(!pq.isEmpty()){
            int [] vertex = pq.poll();
            mst[vertex[0]] = true;
            List<int []> list = graph.get(vertex[0]);
            for(int [] v : list){
                if(!mst[v[0]] && v[1]<key[v[0]]){
                    key[v[0]] = v[1];
                    parent[v[0]] = vertex[0];
                    pq.offer(new int[]{v[0], key[v[0]]});
                }
            }
        }
        return parent;
    }

    public static int hammingDistance(String str1, String str2){
        int len = str1.length();
        int count = 0;
        for(int i = 0; i<len; i++){
            if(str1.charAt(i)!=str2.charAt(i))  count++;
        }
        return count;
    }
}



-------
Perplex
-------
import java.util.*;

public class Solution {

    static Scanner scan = new Scanner(System.in);

    public static void main(String[] args) {
        solve();
    }

    public static void solve(){
        int n = scan.nextInt();
        int [] nums = new int[n];
        for(int i = 0; i<n; i++){
            nums[i] = scan.nextInt();
        }
        int MOD = 1000000007;
        long [] prefix = new long[n+1];
        for(int i = 0; i<n; i++){
            prefix[i+1] = (prefix[i] + nums[i])%MOD;
        }
        long [] prePrefix = new long[n+2];
        for(int i = 0; i<=n; i++){
            prePrefix[i+1] = (prePrefix[i]+prefix[i])%MOD;
        }
        int [] leftMin = new int[n];
        int [] rightMin = new int[n];
        Arrays.fill(leftMin, -1);
        Arrays.fill(rightMin, n);
        Stack<Integer> stack = new Stack<>();
        for(int i = 0; i<n; i++){
            while(!stack.isEmpty() && nums[stack.peek()]>=nums[i]){
                rightMin[stack.peek()] = i;
                stack.pop();
            }
            stack.push(i);
        }
        stack.clear();
        for(int i = n-1; i>=0; i--){
            while(!stack.isEmpty() && nums[stack.peek()]>nums[i]){
                leftMin[stack.peek()] = i;
                stack.pop();

            }
            stack.push(i);
        }
        long sum = 0;
        for(int i = 0; i<n; i++){
            sum += ((((i-leftMin[i])*(prePrefix[rightMin[i]+1]-prePrefix[i+1]))%MOD + 2*MOD - ((rightMin[i]-i)*(prePrefix[i+1]-prePrefix[leftMin[i]+1]))%MOD)*nums[i])%MOD;
            sum %= MOD;
        }
        System.out.println(sum);
    }
}
